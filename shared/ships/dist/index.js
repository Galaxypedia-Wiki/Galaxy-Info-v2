var Z=Object.create;var g=Object.defineProperty;var ee=Object.getOwnPropertyDescriptor;var re=Object.getOwnPropertyNames;var te=Object.getPrototypeOf,se=Object.prototype.hasOwnProperty;var N=s=>g(s,"__esModule",{value:!0});var w=(s,e)=>()=>(e||s((e={exports:{}}).exports,e),e.exports),ae=(s,e)=>{N(s);for(var r in e)g(s,r,{get:e[r],enumerable:!0})},ie=(s,e,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let t of re(e))!se.call(s,t)&&t!=="default"&&g(s,t,{get:()=>e[t],enumerable:!(r=ee(e,t))||r.enumerable});return s},ne=s=>ie(N(g(s!=null?Z(te(s)):{},"default",s&&s.__esModule&&"default"in s?{get:()=>s.default,enumerable:!0}:{value:s,enumerable:!0})),s);var U=w((me,H)=>{H.exports=function(e){e=e.toLowerCase();var r={for:function(t){var a=0,i={found:!0};t=t.toLowerCase();for(var d=t.length,c=0;c<d;c++){if(a=e.indexOf(t[c],a),a===-1)return{found:!1};c==0&&(i.start=a)}return i.end=a+1,i}};return r}});var K=w((ge,W)=>{W.exports=function(e,r){for(var t=e.length,a=Math.ceil(t*r)||1,i=[],d=t;d>=a;){for(var c=t-d,n=0;n<=c;n++){var o=e.substr(n,d);i.indexOf(o)===-1&&i.push(o)}d--}return i}});var V=w((fe,j)=>{var oe=U(),le=K();j.exports=function(e,r,t){if(typeof e!="string"||e==="")return r;t=t||{};var a=t.accessor||function(n){return n},i=t.precision===void 0?1:t.precision,d=[],c=le(e,i);return r.forEach(function(n){var o=a(n);c.find(function(B){var m=oe(o).for(B);return m.found&&d.push({gram:B,length:m.end-m.start,start:m.start,searchableItem:o,item:n}),m.found})}),d.sort(function(n,o){return n.gram.length!==o.gram.length?o.gram.length-n.gram.length:n.length!==o.length?n.length-o.length:n.start!==o.start?n.start-o.start:n.searchableItem>o.searchableItem?1:n.searchableItem<o.searchableItem?-1:0}).map(function(n){return n.item})}});ae(exports,{Alpha:()=>l,BUILD_MENU_CLASSES:()=>de,CLASSES:()=>he,ClientShips:()=>q,ClientTurrets:()=>Q,DAMAGE_TYPE_DISTRIBUTIONS:()=>h,Dps:()=>p,LOYALTY_REQUIREMENTS:()=>pe,PERMITS:()=>S,RESISTANCE:()=>ue,SPINALS:()=>f,SPINAL_RELOAD_EXPONENT:()=>T,ServerShips:()=>X,ServerTurrets:()=>J,Ship:()=>R,ShipFighters:()=>M,ShipNotFoundError:()=>A,ShipSpinal:()=>b,ShipSpinalGun:()=>G,ShipSpinals:()=>_,ShipTurrets:()=>z,ShipWeapons:()=>L,Ships:()=>y,ShipsNotDumpedError:()=>I,ShipsNotInitializedError:()=>C,TURRET_CLASS_DAMAGE_DISTRIBUTIONS:()=>x,TurretNotFoundError:()=>P,Turrets:()=>v,TurretsNotDumpedError:()=>F,TurretsNotInitializedError:()=>O,Weapon:()=>u});var Y=ne(V());var he=["Admin","Alien","Miner","Freighter","Fighter","Frigate","Destroyer","Cruiser","Battlecruiser","Battleship","Dreadnought","Carrier","Super Capital","Titan"],h={Laser:{shield:1,hull:.3,ideal:"shield"},Kinetic:{shield:.4,hull:1,ideal:"hull"},Plasma:{shield:1,hull:.7,ideal:"shield"},Missile:{shield:.7,hull:1,ideal:"hull"}},x={Mining:h.Laser,Laser:h.Laser,Railgun:h.Kinetic,Flak:h.Kinetic,Cannon:h.Kinetic,PDL:h.Laser},f={Phaser:{damageDistribution:h.Laser,Tiny:{damage:28,reload:.8,range:4500,velocity:5e3},Small:{damage:40,reload:1,range:4750,velocity:4500},Medium:{damage:72,reload:1.6,range:5e3,velocity:4e3},Large:{damage:120,reload:2.4,range:5250,velocity:3500},Huge:{damage:198,reload:3.6,range:5500,velocity:3e3}},Cannon:{damageDistribution:h.Kinetic,Tiny:{damage:40,reload:1.6,range:5500,velocity:3e3},Small:{damage:60,reload:2,range:5750,velocity:2800},Medium:{damage:112,reload:3.2,range:6e3,velocity:2600},Large:{damage:160,reload:4,range:6250,velocity:2400},Huge:{damage:270,reload:6,range:6500,velocity:2200}},Torpedo:{damageDistribution:h.Missile,Tiny:{damage:200,reload:5,range:8e3,velocity:700},Small:{damage:330,reload:6,range:9e3,velocity:600},Medium:{damage:490,reload:7,range:1e4,velocity:500},Large:{damage:680,reload:8,range:11e3,velocity:400},Huge:{damage:900,reload:9,range:12e3,velocity:300}}},T=1.1,S={"37":"SC Build","38":"Class A","39":"Class B","40":"Class C","41":"Class D","42":"Class E"},ue={Fighter:0,Frigate:.2,Destroyer:.25,Cruiser:.3,Battlecruiser:.4,Battleship:.45,Dreadnought:.5,Carrier:.55,"Super Capital":.65,Titan:.7,Miner:.3,Freighter:.1,Alien:.3,Admin:.9},pe={Fighter:.09,Frigate:0,Destroyer:0,Cruiser:0,Battlecruiser:.03,Battleship:.05,Dreadnought:.07,Carrier:.09,"Super Capital":.11,Titan:0,Miner:0,Freighter:0,Alien:0,Admin:0},de=["Miner","Freighter","Frigate","Destroyer","Cruiser","Battlecruiser","Battleship","Dreadnought","Carrier","Super Capital"];var u=class{},l=class{constructor(e,r,t){this.shield=e??0,this.hull=r??0,this.max=t??0}add(...e){for(let r of e)this.shield+=r.shield,this.hull+=r.hull,this.max+=r.max;return this}multiply(e){return this.shield*=e,this.hull*=e,this.max*=e,this}},p=class{constructor(e,r){this.shield=e??0,this.hull=r??0}add(...e){for(let r of e)this.shield+=r.shield,this.hull+=r.hull;return this}multiply(e){return this.shield*=e,this.hull*=e,this}get average(){return(this.shield+this.hull)/2}};var C=class extends Error{},I=class extends Error{},A=class extends Error{};function E(...s){console.log("[Ships]",...s)}var D="ships_dump",y=class{constructor(e){this.ships={},this.turrets=e,this.initialized=!1}assertReady(){if(!this.initialized)throw new C("Ships instance has not been initialized; do `await <Ships>.init()` before using it.");if(Object.keys(this.ships).length===0)throw new I("Ships have not been exported from the game.")}async load(e){this.ships={},await this.loadShips(e,this.turrets,!0),await this.loadShips(e,this.turrets,!1),this.initialized=!0}async loadShips(e,r,t){for(let a of Object.values(e))try{if(!t&&a.class==="Fighter"||t&&a.class!=="Fighter")continue;let i=new R(this.ships,r,a);this.ships[i.name]=i}catch{}}find(e){if(this.assertReady(),this.ships.hasOwnProperty(e))return this.ships[e];let r=(0,Y.default)(e,Object.keys(this.ships))[0];if(!r)throw new A("Could not find a ship with that name.");return this.ships[r]}all(){return this.assertReady(),this.ships}},R=class{constructor(e,r,t){this.serializedShip=t,this.name=t.name,this.class=t.class,this.description=t.description??"(no description)",this.eventId=t.eventId,this.permit=this.calculatePermit(),this.explosionSize=t.explosionSize,this.notForSale=t.notForSale,this.cargoHold=t.cargoHold,this.oreHold=t.oreHold,this.secret=t.secret,this.health=t.health,this.speed={top:t.topSpeed,acceleration:t.acceleration,turn:t.turnSpeed},this.weapons=new L(r,t.weapons),this.fighters=new M(e,t.fighters)}calculatePermit(){if(!this.eventId||!this.serializedShip.permitOverride)return null;let e=this.serializedShip.permitOverride.toString();if(!(e in S))throw new Error(`Unknown permit override: ${e}`);return S[e]}},L=class extends u{constructor(e,r){super();this.turrets=new z(e,r.turrets),this.spinals=new _(r.spinals)}alpha(e,r=0){let t=this.turrets.alpha(e,r),a=this.spinals.alpha(e);return t.add(a)}dps(e,r=0){let t=this.turrets.dps(e,r),a=this.spinals.dps(e);return t.add(a)}},z=class extends u{constructor(e,r){super();this.turrets=new Map;for(let t of r){let a=e.get(t);this.incrementTurret(a)}}incrementTurret(e){let r=this.turrets.get(e)??0;this.turrets.set(e,r+1)}alpha(e,r=0){let t=new l;for(let[a,i]of this.turrets)t.add(a.alpha(e).multiply(i).multiply(1+r));return t}dps(e,r=0){let t=new p;for(let[a,i]of this.turrets)t.add(a.dps(e).multiply(i).multiply(1+r));return t}},_=class extends u{constructor(e){super();this.spinals=[],e.f&&(this.f=new b(e.f),this.spinals.push(this.f)),e.g&&(this.g=new b(e.g),this.spinals.push(this.g))}alpha(e){return new l().add(...this.spinals.map(r=>r.alpha(e)))}dps(e){return new p().add(...this.spinals.map(r=>r.dps(e)))}},b=class extends u{constructor(e){super();this.range=f[e.weaponType][e.weaponSize].range,this.guns=[];for(let t of e.guns)this.guns.push(new G(e,t));this.weaponSize=e.weaponSize,this.weaponType=e.weaponType,this.barrels=0;let r=this.guns[0];for(let t of this.guns)this.barrels+=t.barrels,t.barrels>r.barrels&&(r=t);e.reloadOverride?this.reload=e.interval*(r.barrels-1)+e.reloadOverride:this.reload=r.reload}alpha(e){return e&&e>this.range?new l:new l().add(...this.guns.map(r=>r.alpha()))}dps(e){let r=this.alpha(e);return new p(r.shield/this.reload,r.hull/this.reload)}},G=class extends u{constructor(e,r){super();let t=f[e.weaponType],a=t[e.weaponSize];this._alpha=new l(r.barrels*a.damage*t.damageDistribution.shield,r.barrels*a.damage*t.damageDistribution.hull,r.barrels*a.damage*t.damageDistribution[t.damageDistribution.ideal]),this.reload=e.interval*(r.barrels-1)+a.reload*Math.pow(T,r.barrels-1),this.barrels=r.barrels}alpha(){return new l().add(this._alpha)}dps(){return new p(this._alpha.shield/this.reload,this._alpha.hull/this.reload)}},M=class extends u{constructor(e,r){super();this.hasFighters=!1,this.fighters=new Map;for(let t of r)try{let a=e[t];if(!a)continue;this.incrementFighter(a),this.hasFighters=!0}catch(a){E(a)}}incrementFighter(e){let r=this.fighters.get(e)??0;this.fighters.set(e,r+1)}alpha(e,r=0){let t=new l;for(let[a,i]of this.fighters)t.add(a.weapons.alpha(e,r).multiply(i));return t}dps(e,r=0){let t=new p;for(let[a,i]of this.fighters)t.add(a.weapons.dps(e,r).multiply(i));return t}},q=class extends y{constructor(e){super(e)}async init(e){await super.load(e)}},X=class extends y{constructor(e){super(e.turrets);this.GalaxyInfo=e}async init(){try{let e=await this.GalaxyInfo.prisma.keyValue.findUnique({where:{key:D},rejectOnNotFound:!0});await super.load(e.value)}catch(e){E("Ships database reset.",e)}E("Initialized")}async save(e){await this.GalaxyInfo.prisma.keyValue.upsert({create:{key:D,value:e},update:{value:e},where:{key:D}}),await super.load(e)}};var O=class extends Error{},F=class extends Error{},P=class extends Error{},k="turrets_dump",v=class{constructor(){this.turrets={},this.initialized=!1}assertReady(){if(!this.initialized)throw new O("Turrets instance has not been initialized; do `await <Turrets>.init()` before using it.");if(Object.keys(this.turrets).length===0)throw new F("Turrets have not been exported from the game.")}async load(e){for(let r of Object.values(e)){let t=new $(r);this.turrets[t.name]=t}this.initialized=!0}get(e){if(this.assertReady(),!this.turrets.hasOwnProperty(e))throw new P(`Could not find turret called ${e}.`);return this.turrets[e]}all(){return this.assertReady(),this.turrets}},$=class extends u{constructor(e){super();let r=e.Group==="Alien"?h.Plasma:x[e.Class];this._alpha=new l(e.Damage*r.shield,e.Damage*r.hull,e.Damage*r[r.ideal]),this.name=e.Name,this.range=e.Range,this.reload=e.Reload}alpha(e,r=0){return e&&e>this.range?new l:new l().add(this._alpha).multiply(1+r)}dps(e,r=0){let t=this.alpha(e);return new p(t.shield/this.reload,t.hull/this.reload).multiply(1+r)}},Q=class extends v{constructor(){super()}async init(e){await super.load(e)}},J=class extends v{constructor(e){super();this.GalaxyInfo=e}async init(){try{let e=await this.GalaxyInfo.prisma.keyValue.findUnique({where:{key:k},rejectOnNotFound:!0});await this.load(e.value)}catch{console.log("Turrets database reset.")}}async save(e){await this.GalaxyInfo.prisma.keyValue.upsert({create:{key:k,value:e},update:{value:e},where:{key:k}}),await this.load(e)}};
